/* 
 * NOTICE
 * This software was produced for the office of the Director of National Intelligence (ODNI)
 * Intelligence Advanced Research Projects Activity (IARPA) ICArUS program, 
 * BAA number IARPA-BAA-10-04, under contract 2009-0917826-016, and is subject 
 * to the Rights in Data-General Clause 52.227-14, Alt. IV (DEC 2007).
 * 
 * This software and data is provided strictly to support demonstrations of ICArUS challenge problems
 * and to assist in the development of cognitive-neuroscience architectures. It is not intended to be used
 * in operational systems or environments.
 * 
 * Copyright (C) 2015 The MITRE Corporation. All Rights Reserved.
 * 
 */
package org.mitre.icarus.cps.app.experiment;

import javax.swing.SwingWorker;

import org.mitre.icarus.cps.app.widgets.dialog.ErrorDlg;
import org.mitre.icarus.cps.experiment_core.Experiment;
import org.mitre.icarus.cps.experiment_core.condition.Condition;
import org.mitre.icarus.cps.experiment_core.controller.BasicConditionController;
import org.mitre.icarus.cps.experiment_core.gui.ConditionPanel;
import org.mitre.icarus.cps.experiment_core.gui.INavButtonPanel.ButtonType;

/**
 * Abstract base class for ICArUS exam phase (condition/task/mission/tutorial/etc.) controllers.
 * 
 * @author CBONACETO
 *
 */
public abstract class IcarusConditionController<
	EC extends IcarusExperimentController<E, ?, ?, ?>,
	E extends Experiment<?>, 
	C extends Condition,
	CP extends ConditionPanel> extends BasicConditionController<EC, E, C, CP> {
	
	/** The exam controller */
	protected EC examController;
	
	/** The exam */
	protected E exam;
	
	/** The condition */
	protected C condition;
		
	/** The condition panel */
	protected CP conditionPanel;
	
	/** The current trial number */
	protected int currentTrial;
	
	/** Whether or not we're debugging */
	//TODO: Make sure this is false when building distributions
	protected boolean debug = false;
	
	/** Amount of time to pause before re-enabling the Next button when advancing to the next trial */
	protected int pauseLength = 200; //150	
	
	/**
	 * 
	 * 
	 * @return
	 */
	public EC getExamController() {
		return examController;
	}	

	/**
	 * Get the exam.
	 * 
	 * @return the exam
	 */
	public E getExam() {
		return exam;
	}	

	/**
	 * Set the exam.
	 * 
	 * @param exam the exam
	 */
	public void setExam(E exam) {
		this.exam = exam;
	}
	
	@Override
	public C getCondition() {
		return condition;
	}

	/* (non-Javadoc)
	 * @see org.mitre.icarus.cps.experiment_core.controller.IConditionController#stopCondition()
	 */
	@Override
	public void stopCondition() {		
		conditionRunning = false;
		try {
			performCleanup();
		} catch(Exception ex) {			
		}
	}
	
	/** Subclasses may override this to perform clean-up when the condition completes. */
	protected abstract void performCleanup();	

	/**
	 * Pauses pauseLength milliseconds before re-enabling the Next button when advancing to the next trial. 
	 */
	public void pauseBeforeNextTrial() {
		pauseBeforeNextTrial(pauseLength);
	}
	
	/**
	 * Pauses for the given number of milliseconds before re-enabling the Next button when advancing to the next trial.
	 * 
	 * @param pauseLength the number of milliseconds to pause
	 */
	public void pauseBeforeNextTrial(final long pauseLength) {
		if(examController != null) {
			if(debug || pauseLength <= 0) {
				setNavButtonEnabled(ButtonType.Next, true);
			}
			else {
				examController.setNavButtonEnabled(ButtonType.Next, false);			
				SwingWorker<Object, Object> pauseWorker = new SwingWorker<Object, Object>() {
					@Override
					protected Object doInBackground() throws Exception {
						pause(pauseLength);
						return null;
					}
					@Override
					protected void done() {
						setNavButtonEnabled(ButtonType.Next, true);
					}
				};		
				try {					
					pauseWorker.execute();
				} catch(Exception e) {
					setNavButtonEnabled(ButtonType.Next, true);
				}
			}
		}
	}
	
	/**
	 * Set whether the given navigation button is enabled. Also adjusts the
	 * visibility of the button (enabled buttons are made visible, disabled buttons are made invisible).
	 * 
	 * @param buttonType
	 * @param enabled
	 */
	protected void setNavButtonEnabled(ButtonType buttonType, boolean enabled) {
		examController.setNavButtonVisible(buttonType, enabled);
		examController.setNavButtonEnabled(buttonType, enabled);
	}

	/**
	 * Pause for the given number of milliseconds.
	 * 
	 * @param milliseconds
	 */
	public void pause(long milliseconds) {
		long elapsedTime = 0;
		while(elapsedTime < milliseconds && conditionRunning) {
			try {Thread.sleep(50);} catch(InterruptedException ex) {}
			elapsedTime += 50;
		}
	}
	
	/**
	 * Handle an exception generated by a condition controller 
	 * 
	 * @param ex
	 * @param showStackTrace
	 */
	protected void handleException(Exception ex, boolean showStackTrace) {
		ErrorDlg.showErrorDialog(examController != null ? examController.getParentWindow() : null, 
				ex, showStackTrace);
	}
	
	/**
	 * @param trialNumber
	 * @param trialPartNumber
	 * @param numTrialParts
	 * @param trialPartName
	 * @return
	 */
	protected StringBuilder createTrialNumberString(int trialNumber, int trialPartNumber, int numTrialParts, String trialPartName) {
		return createTrialNumberString(trialNumber, trialPartNumber, numTrialParts, trialPartName, new StringBuilder());
	}
	
	/**
	 * @param trialNumber
	 * @param trialPartNumber
	 * @param numTrialParts
	 * @param trialPartName
	 * @param sb
	 * @return
	 */
	private StringBuilder createTrialNumberString(int trialNumber, int trialPartNumber, int numTrialParts, String trialPartName,
			StringBuilder sb) {
		if(sb == null) sb = new StringBuilder();
		sb.append("Trial <b>");
		sb.append(Integer.toString(trialNumber) + "</b> [");
		if(numTrialParts > 1) {
			sb.append("Part <b>" + Integer.toString(trialPartNumber));
			sb.append("/" + Integer.toString(numTrialParts) + "</b>: ");
		}
		sb.append(trialPartName + "]: ");
		return sb;
	}		
}